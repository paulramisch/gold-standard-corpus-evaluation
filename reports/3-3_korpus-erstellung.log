Traceback (most recent call last):
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/paul/opt/miniconda3/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/paul/opt/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
for index, non_mdb in non_mdbs.iterrows():
    potential_matches = get_pol_by_qid(non_mdb.qid)
    match = pd.DataFrame([["", potential_matches.head(1).gnd.values[0], non_mdb.qid,
                           non_mdb.family_name]], columns=politician_identifier_columns)
    politician_identifier = pd.concat([politician_identifier, match], ignore_index=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
[0;32m/var/folders/y0/f53fkf_d6s38rgm45nh4tbcw0000gn/T/ipykernel_45770/4269975489.py[0m in [0;36m<cell line: 1>[0;34m()[0m
[1;32m      1[0m [0;32mfor[0m [0mindex[0m[0;34m,[0m [0mnon_mdb[0m [0;32min[0m [0mnon_mdbs[0m[0;34m.[0m[0miterrows[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m     [0mpotential_matches[0m [0;34m=[0m [0mget_pol_by_qid[0m[0;34m([0m[0mnon_mdb[0m[0;34m.[0m[0mqid[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m     match = pd.DataFrame([["", potential_matches.head(1).gnd.values[0], non_mdb.qid,
[1;32m      4[0m                            non_mdb.family_name]], columns=politician_identifier_columns)
[1;32m      5[0m     [0mpolitician_identifier[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mconcat[0m[0;34m([0m[0;34m[[0m[0mpolitician_identifier[0m[0;34m,[0m [0mmatch[0m[0;34m][0m[0;34m,[0m [0mignore_index[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/var/folders/y0/f53fkf_d6s38rgm45nh4tbcw0000gn/T/ipykernel_45770/296178177.py[0m in [0;36mget_pol_by_qid[0;34m(manual_match)[0m
[1;32m     11[0m         [0mSERVICE[0m [0mwikibase[0m[0;34m:[0m[0mlabel[0m [0;34m{[0m[0;34m{[0m [0mbd[0m[0;34m:[0m[0mserviceParam[0m [0mwikibase[0m[0;34m:[0m[0mlanguage[0m [0;34m"de"[0m [0;34m}[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m
[1;32m     12[0m     }}""".format(manual_match)
[0;32m---> 13[0;31m     [0mpol_sparql[0m [0;34m=[0m [0mget_pol_info[0m[0;34m([0m[0msparql_query[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     14[0m [0;34m[0m[0m
[1;32m     15[0m     [0;32mreturn[0m [0mpol_sparql[0m[0;34m[0m[0;34m[0m[0m

[0;32m/var/folders/y0/f53fkf_d6s38rgm45nh4tbcw0000gn/T/ipykernel_45770/2615177501.py[0m in [0;36mget_pol_info[0;34m(query)[0m
[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m     [0;31m# Umwandlung in ein Dataframe[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m     [0mresults[0m [0;34m=[0m [0msparql[0m[0;34m.[0m[0mquery[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mconvert[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m     [0mtable_sparql[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mjson_normalize[0m[0;34m([0m[0mresults[0m[0;34m[[0m[0;34m'results'[0m[0;34m][0m[0;34m[[0m[0;34m'bindings'[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/site-packages/SPARQLWrapper/Wrapper.py[0m in [0;36mquery[0;34m(self)[0m
[1;32m    958[0m         [0;34m:[0m[0mrtype[0m[0;34m:[0m [0;34m:[0m[0;32mclass[0m[0;34m:[0m[0;31m`[0m[0mQueryResult[0m[0;31m`[0m [0minstance[0m[0;34m[0m[0;34m[0m[0m
[1;32m    959[0m         """
[0;32m--> 960[0;31m         [0;32mreturn[0m [0mQueryResult[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_query[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    961[0m [0;34m[0m[0m
[1;32m    962[0m     [0;32mdef[0m [0mqueryAndConvert[0m[0;34m([0m[0mself[0m[0;34m)[0m [0;34m->[0m [0;34m"QueryResult.ConvertResult"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/site-packages/SPARQLWrapper/Wrapper.py[0m in [0;36m_query[0;34m(self)[0m
[1;32m    938[0m                 [0;32mraise[0m [0mEndPointInternalError[0m[0;34m([0m[0me[0m[0;34m.[0m[0mread[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    939[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 940[0;31m                 [0;32mraise[0m [0me[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    941[0m [0;34m[0m[0m
[1;32m    942[0m     [0;32mdef[0m [0mquery[0m[0;34m([0m[0mself[0m[0;34m)[0m [0;34m->[0m [0;34m"QueryResult"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/site-packages/SPARQLWrapper/Wrapper.py[0m in [0;36m_query[0;34m(self)[0m
[1;32m    924[0m                 [0mresponse[0m [0;34m=[0m [0murlopener[0m[0;34m([0m[0mrequest[0m[0;34m,[0m [0mtimeout[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    925[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 926[0;31m                 [0mresponse[0m [0;34m=[0m [0murlopener[0m[0;34m([0m[0mrequest[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    927[0m             [0;32mreturn[0m [0mresponse[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mreturnFormat[0m[0;34m[0m[0;34m[0m[0m
[1;32m    928[0m         [0;32mexcept[0m [0murllib[0m[0;34m.[0m[0merror[0m[0;34m.[0m[0mHTTPError[0m [0;32mas[0m [0me[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/urllib/request.py[0m in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    212[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    213[0m         [0mopener[0m [0;34m=[0m [0m_opener[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 214[0;31m     [0;32mreturn[0m [0mopener[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m,[0m [0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    215[0m [0;34m[0m[0m
[1;32m    216[0m [0;32mdef[0m [0minstall_opener[0m[0;34m([0m[0mopener[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    521[0m         [0;32mfor[0m [0mprocessor[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mprocess_response[0m[0;34m.[0m[0mget[0m[0;34m([0m[0mprotocol[0m[0;34m,[0m [0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    522[0m             [0mmeth[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mprocessor[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 523[0;31m             [0mresponse[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    524[0m [0;34m[0m[0m
[1;32m    525[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/urllib/request.py[0m in [0;36mhttp_response[0;34m(self, request, response)[0m
[1;32m    630[0m         [0;31m# request was successfully received, understood, and accepted.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    631[0m         [0;32mif[0m [0;32mnot[0m [0;34m([0m[0;36m200[0m [0;34m<=[0m [0mcode[0m [0;34m<[0m [0;36m300[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 632[0;31m             response = self.parent.error(
[0m[1;32m    633[0m                 'http', request, response, code, msg, hdrs)
[1;32m    634[0m [0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/urllib/request.py[0m in [0;36merror[0;34m(self, proto, *args)[0m
[1;32m    559[0m         [0;32mif[0m [0mhttp_err[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    560[0m             [0margs[0m [0;34m=[0m [0;34m([0m[0mdict[0m[0;34m,[0m [0;34m'default'[0m[0;34m,[0m [0;34m'http_error_default'[0m[0;34m)[0m [0;34m+[0m [0morig_args[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 561[0;31m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_call_chain[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    562[0m [0;34m[0m[0m
[1;32m    563[0m [0;31m# XXX probably also want an abstract factory that knows when it makes[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    492[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    493[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 494[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    495[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    496[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/lib/python3.9/urllib/request.py[0m in [0;36mhttp_error_default[0;34m(self, req, fp, code, msg, hdrs)[0m
[1;32m    639[0m [0;32mclass[0m [0mHTTPDefaultErrorHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    640[0m     [0;32mdef[0m [0mhttp_error_default[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mreq[0m[0;34m,[0m [0mfp[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 641[0;31m         [0;32mraise[0m [0mHTTPError[0m[0;34m([0m[0mreq[0m[0;34m.[0m[0mfull_url[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m,[0m [0mfp[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    642[0m [0;34m[0m[0m
[1;32m    643[0m [0;32mclass[0m [0mHTTPRedirectHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mHTTPError[0m: HTTP Error 429: Too Many Requests
HTTPError: HTTP Error 429: Too Many Requests

